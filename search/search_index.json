{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"financialcalc/","title":"FinancialCalc","text":"<p>This code is cool</p> <p>This module has simple functions: <code>fye</code></p>"},{"location":"financialcalc/#financialcalc.positions.calculate_position","title":"<code>calculate_position(stock_df, pos_type)</code>","text":"<p>Given a stock's DataFrame and position type, calculate the positon's return as a float.</p> <p>:param stock_df: The DataFrame representing the stock's historical price. :param pos_type: The position type to calculate for. :return: float</p> Source code in <code>financialcalc\\positions.py</code> <pre><code>def calculate_position(stock_df: pd.DataFrame, pos_type: PositionType) -&gt; float:\n    \"\"\"\n    Given a stock's DataFrame and position type, calculate the positon's\n    return as a float.\n\n    :param stock_df: The DataFrame representing the stock's historical price.\n    :param pos_type: The position type to calculate for.\n    :return: float\n    \"\"\"\n    first_day = stock_df[\"Open\"].iloc[0]\n    last_day = stock_df[\"Close\"].iloc[-1]\n\n    if pos_type == PositionType.LONG:\n        return ((last_day - first_day) / first_day) * 100\n\n    if pos_type == PositionType.SHORT:\n        return ((first_day - last_day) / first_day) * 100\n\n    return -999.99\n</code></pre>"},{"location":"financialcalc/#financialcalc.positions.calculate_position_daily","title":"<code>calculate_position_daily(value, stock_df, pos_type)</code>","text":"<p>Calculate daily position performance for a stock. This function computes the daily value of a position based on the starting capital, the historical price data of the stock, and the type of position (long or short).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; PeepeePooPoo\n&gt;&gt;&gt; Hello\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The starting capital for the position.</p> required <code>stock_df</code> <code>DataFrame</code> <p>A DataFrame containing the stock's historical price data.</p> required <code>pos_type</code> <code>PositionType</code> <p>The type of position to calculate (e.g., long or short).</p> required <p>Returns:</p> Type Description <code>Series</code> <p>pd.Series: A Series indexed by date representing the position's value over time.</p> Source code in <code>financialcalc\\positions.py</code> <pre><code>def calculate_position_daily(\n    value: float, stock_df: pd.DataFrame, pos_type: PositionType\n) -&gt; pd.Series:\n    \"\"\"Calculate daily position performance for a stock. This function computes the daily value of a position based on the starting capital, the historical price data of the stock, and the type of position (long or short).\n\n    Examples:\n        &gt;&gt;&gt; PeepeePooPoo\n        &gt;&gt;&gt; Hello\n\n    Args:\n        value (float): The starting capital for the position.\n        stock_df (pd.DataFrame): A DataFrame containing the stock's historical price data.\n        pos_type (PositionType): The type of position to calculate (e.g., long or short).\n\n    Returns:\n        pd.Series: A Series indexed by date representing the position's value over time.\n    \"\"\"\n\n    position_value = pd.Series(index=stock_df.index)\n    position_value.iloc[0] = value\n\n    stock_original_price = stock_df[\"Open\"].iloc[0]\n\n    if pos_type == PositionType.LONG:\n        for i in range(1, len(stock_df)):\n            # Calculate the portfolio value each day, WITHOUT compounding.\n            position_value.iloc[i] = value * (\n                stock_df[\"Close\"].iloc[i] / stock_original_price\n            )\n\n    if pos_type == PositionType.SHORT:\n        for i in range(1, len(stock_df)):\n            # Calculate the portfolio value each day, WITHOUT compounding.\n            position_value.iloc[i] = value * (\n                stock_original_price / stock_df[\"Close\"].iloc[i]\n            )\n\n    return position_value\n</code></pre>"}]}